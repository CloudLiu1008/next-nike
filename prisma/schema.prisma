// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  orders    Order[]  // 用户的订单关系
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int                @id @default(autoincrement())
  name        String
  description String
  price       Float
  images      String[]
  sizes       String[]
  colors      String[]
  stock       Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // 多对多关联
  categories  ProductCategory[]
  orderItems  OrderItem[]
}

model Category {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  description String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // 多对多关联
  products    ProductCategory[]
}

// 显式中间表：ProductCategory
model ProductCategory {
  productId   Int
  categoryId  Int
  sortOrder   Int                @default(0) // 在分类中的排序，可选
  createdAt   DateTime           @default(now())

  product     Product            @relation(fields: [productId], references: [id])
  category    Category           @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])               // 联合主键
  @@index([productId])
  @@index([categoryId])
}


model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int         // 用户外键
  items       OrderItem[] // 订单项
  totalAmount Float       // 订单总金额
  status      String      // 订单状态
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int      // 订单外键
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      // 产品外键
  quantity  Int      // 购买数量
  price     Float    // 购买时的价格
  size      String   // 选择的尺码
  color     String   // 选择的颜色
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
