// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  orders    Order[]  // 用户的订单关系
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  menus     Menu[]   // 添加与菜单的关系
  description String? // 添加描述字段，设为可选
  parentId  Int?     // 父分类ID，用于构建层级关系
  order     Int      @default(0) // 排序顺序
  isActive  Boolean  @default(true)
  parent    Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  ProductCategory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  images      String[]  // PostgreSQL 支持
  sizes       String[]  // 可用于电商 SKU 显示
  colors      String[]  // 可用于前端渲染不同配色
  stock       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categories  ProductCategory[]
  orderItems  OrderItem[] 
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([productId, categoryId])  // 避免重复关联
}




model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int         // 用户外键
  items       OrderItem[] // 订单项
  totalAmount Float       // 订单总金额
  status      String      // 订单状态
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int      // 订单外键
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      // 产品外键
  quantity  Int      // 购买数量
  price     Float    // 购买时的价格
  size      String   // 选择的尺码
  color     String   // 选择的颜色
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id        Int       @id @default(autoincrement())
  name      String    // 菜单名称
  path      String    // 菜单路径
  parentId  Int?      // 父菜单ID
  order     Int       @default(0) // 排序顺序
  isActive  Boolean   @default(true)
  parent    Menu?     @relation("MenuToMenu", fields: [parentId], references: [id])
  children  Menu[]    @relation("MenuToMenu")
  categoryId Int?     // 关联的分类ID，可选
  category  Category? @relation(fields: [categoryId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}